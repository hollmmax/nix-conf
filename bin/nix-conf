#!/usr/bin/env bash

# Script to rebuild my system(s) when something changes. I'm running
# this from a cron job on a server.
#
# Usage: nix-conf [update|build] [nix build options]
#
# With no sub-command, update is implied.
#
# Example: nix-conf build --log-format raw

set -euo pipefail

was_head_changed() {
    local old_tree=$(git rev-parse HEAD^{tree})
    "$@" || exit 1
    local new_tree=$(git rev-parse HEAD^{tree})
    if [[ $old_tree != $new_tree ]]; then
        echo "!!! Tree hash in $PWD changed from $old_tree to $new_tree"
        return 0
    fi
    return 1
}

exit_if_dirty() {
    if ! git diff-index --quiet HEAD --; then
        echo >&2 "$PWD dirty!"
        exit 1
    fi
}

update_nix_conf() {
    cd ~/nix/conf
    # The following must be on a single line so that update of the script via git pull works.
    if was_head_changed git pull --quiet https://github.com/wentasah/nix-conf.git; then
        WAS_RERUN=0 exec $0
    fi

    # Git repo was not changed - report the result based on the value of RERUN variable.
    local ret=${WAS_RERUN:-1}
    unset WAS_RERUN
    return "$ret"
}

merge_nixpkgs_topics() {
    cd ~/nix/nixpkgs
    local commit_msg='automatic merge by nix-conf'
    if [[ -f .git/machete ]]; then
        # On my laptop - merge all non-root branches managed by git-machete
        readarray -t to_merge < <(sed -nE '/^[[:space:]]+/ s///p' .git/machete)
        commit_msg+=$'\n'$'\n'"Merged branches:${to_merge[@]/#/$'\n'- }"
    else
        # CI: Recreate the merge from HEAD of my repo
        ## git fetch . test
        if git show wentasah/master|grep -q -F "$commit_msg"; then
            readarray -t to_merge < <(git cat-file -p wentasah/master | sed -ne '/^parent / s///p')
            commit_msg=$(git show --format='%B' wentasah/master) # Use the same commit message
        else
            echo >&2 "HEAD of $(git config remote.wentasah.url) is not a merge commit created by nix-conf"
            exit 1
        fi
    fi
    git merge --quiet --no-ff --no-commit "${to_merge[@]}"
    GIT_AUTHOR_NAME=nix-conf \
    GIT_AUTHOR_EMAIL=nix-conf@localhost \
    GIT_AUTHOR_DATE=$(git show origin/nixos-unstable --format='%aD') \
    GIT_COMMITTER_NAME=nix-conf \
    GIT_COMMITTER_EMAIL=nix-conf@localhost \
    GIT_COMMITTER_DATE=$(git show origin/nixos-unstable --format='%cD') \
    git commit -m "$commit_msg"
}

update_nixpkgs() {
    cd ~/nix/nixpkgs
    exit_if_dirty

    update_nixpkgs_and_merge_topics() {
        git fetch --quiet origin
        git fetch --quiet wentasah
        git checkout --quiet master
        git reset --keep origin/nixos-unstable
        merge_nixpkgs_topics
    }

    was_head_changed update_nixpkgs_and_merge_topics
}

update_home_manager() {
    cd ~/nix/home-manager
    was_head_changed git pull --quiet
}

updated() {
    local result=1
    update_nix_conf && result=0
    update_home_manager && result=0
    update_nixpkgs && result=0
    return $result
}

build() {
    cd ~/nix

    PATH=/nix/var/nix/profiles/default/bin:$PATH
    if [[ -f conf/flake.nix ]]; then
        local status=0
        nix build \
            "$@" \
            --out-link out/steelpick/flake \
            --override-input nixpkgs ./nixpkgs \
            ./conf#nixosConfigurations.steelpick.config.system.build.toplevel || status=$?
        echo $status > out/steelpick/flake.status
        [[ $status -eq 0 ]] || exit $status

        if [[ $(hostname) = "steelpick" ]]; then
            echo "Diff from current configuration:"
            nix store diff-closures /run/current-system ~/nix/out/steelpick/flake
            echo
            echo "Run one of the following to switch the configuration:"
            echo "  sudo ~/nix/out/steelpick/flake/bin/switch-to-configuration switch"
            echo "  sudo nixos-rebuild switch --override-input nixpkgs ~/nix/nixpkgs"
        else
            (
                cd nixpkgs
                git push --force wentasah HEAD:ci
                git merge -s ours history
                git push wentasah history
                git reset --keep HEAD^
            )
        fi
    else
        export NIX_PATH=nixpkgs=$PWD/nixpkgs:nixos-hardware=$PWD/nixos-hardware
        export NIXOS_CONFIG=$PWD/conf/steelpick/configuration.nix

        mkdir -p out/steelpick/nixos
        (
            cd out/steelpick/nixos
            nix-shell -p nixos-rebuild --run "nixos-rebuild build --keep-going"
        )

        mkdir -p out/steelpick/home
        (
            cd out/steelpick/home
            nix-shell -E 'with import <nixpkgs> { }; runCommand "dummy" { buildInputs = [ (import ~/nix/home-manager {}).home-manager ]; } ""' \
                      --run "home-manager build --keep-going -f ~/nix/conf/steelpick/home.nix"
        )
    fi
}

if [[ ${1:-} ]] && [[ $1 != -* ]]; then
    cmd=$1
    shift
else
    cmd=update
fi

case "$cmd" in
    "update")
        if updated; then
            build "$@"
        else
            echo "No input has changed. Exiting."
        fi;;
    "build")
        build "$@";;
    "merge")
        merge_nixpkgs_topics;;
    *)
        echo >&2 "Unknown command: $cmd"
esac
